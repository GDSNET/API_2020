{"ast":null,"code":"/* eslint-disable no-console */\n\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/inherits\");\n\nvar os = require('os');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL,\n    MESSAGE = _require.MESSAGE;\n\nvar TransportStream = require('winston-transport');\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(Console, _TransportStream);\n\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  function Console() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Console);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Console).call(this, options)); // Expose the name of this Transport on the prototype\n\n    _this.name = options.name || 'console';\n    _this.stderrLevels = _this._stringArrayToSet(options.stderrLevels);\n    _this.consoleWarnLevels = _this._stringArrayToSet(options.consoleWarnLevels);\n    _this.eol = options.eol || os.EOL;\n    return _this;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  _createClass(Console, [{\n    key: \"log\",\n    value: function log(info, callback) {\n      var _this2 = this;\n\n      setImmediate(function () {\n        return _this2.emit('logged', info);\n      }); // Remark: what if there is no raw...?\n\n      if (this.stderrLevels[info[LEVEL]]) {\n        if (console._stderr) {\n          // Node.js maps `process.stderr` to `console._stderr`.\n          console._stderr.write(\"\".concat(info[MESSAGE]).concat(this.eol));\n        } else {\n          // console.error adds a newline\n          console.error(info[MESSAGE]);\n        }\n\n        if (callback) {\n          callback(); // eslint-disable-line callback-return\n        }\n\n        return;\n      } else if (this.consoleWarnLevels[info[LEVEL]]) {\n        if (console._stderr) {\n          // Node.js maps `process.stderr` to `console._stderr`.\n          // in Node.js console.warn is an alias for console.error\n          console._stderr.write(\"\".concat(info[MESSAGE]).concat(this.eol));\n        } else {\n          // console.warn adds a newline\n          console.warn(info[MESSAGE]);\n        }\n\n        if (callback) {\n          callback(); // eslint-disable-line callback-return\n        }\n\n        return;\n      }\n\n      if (console._stdout) {\n        // Node.js maps `process.stdout` to `console._stdout`.\n        console._stdout.write(\"\".concat(info[MESSAGE]).concat(this.eol));\n      } else {\n        // console.log adds a newline.\n        console.log(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n    }\n    /**\n     * Returns a Set-like object with strArray's elements as keys (each with the\n     * value true).\n     * @param {Array} strArray - Array of Set-elements as strings.\n     * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n     * @returns {Object} - TODO: add return description.\n     * @private\n     */\n\n  }, {\n    key: \"_stringArrayToSet\",\n    value: function _stringArrayToSet(strArray, errMsg) {\n      if (!strArray) return {};\n      errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n\n      if (!Array.isArray(strArray)) {\n        throw new Error(errMsg);\n      }\n\n      return strArray.reduce(function (set, el) {\n        if (typeof el !== 'string') {\n          throw new Error(errMsg);\n        }\n\n        set[el] = true;\n        return set;\n      }, {});\n    }\n  }]);\n\n  return Console;\n}(TransportStream);","map":null,"metadata":{},"sourceType":"script"}