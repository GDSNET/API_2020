{"ast":null,"code":"/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL;\n\nvar config = require('./config');\n\nvar Logger = require('./logger');\n\nvar debug = require('diagnostics')('winston:create-logger');\n/**\n * DerivedLogger to attach the logs level methods.\n * @type {DerivedLogger}\n * @extends {Logger}\n */\n\n\nvar DerivedLogger =\n/*#__PURE__*/\nfunction (_Logger) {\n  _inherits(DerivedLogger, _Logger);\n\n  /**\n   * Create a new class derived logger for which the levels can be attached to\n   * the prototype of. This is a V8 optimization that is well know to increase\n   * performance of prototype functions.\n   * @param {!Object} options - Options for the created logger.\n   */\n  function DerivedLogger(options) {\n    var _this;\n\n    _classCallCheck(this, DerivedLogger);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DerivedLogger).call(this, options));\n\n    _this._setupLevels();\n\n    return _this;\n  }\n  /**\n   * Create the log level methods for the derived logger.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _createClass(DerivedLogger, [{\n    key: \"_setupLevels\",\n    value: function _setupLevels() {\n      var _this2 = this;\n\n      Object.keys(this.levels).forEach(function (level) {\n        debug('Define prototype method for \"%s\"', level);\n\n        if (level === 'log') {\n          // eslint-disable-next-line no-console\n          console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n          return;\n        } // Define prototype methods for each log level\n        // e.g. logger.log('info', msg) <––> logger.info(msg) & logger.isInfoEnabled()\n\n\n        _this2[level] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          // Optimize the hot-path which is the single object.\n          if (args.length === 1) {\n            var msg = args[0];\n            var info = msg && msg.message && msg || {\n              message: msg\n            };\n            info.level = info[LEVEL] = level;\n\n            _this2.write(info);\n\n            return _this2;\n          } // Otherwise build argument list which could potentially conform to\n          // either:\n          // . v3 API: log(obj)\n          // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n\n\n          return _this2.log.apply(_this2, [level].concat(args));\n        };\n\n        _this2[isLevelEnabledFunctionName(level)] = function () {\n          return _this2.isLevelEnabled(level);\n        };\n      });\n    }\n  }]);\n\n  return DerivedLogger;\n}(Logger);\n\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\n\n\nmodule.exports = function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    levels: config.npm.levels\n  };\n  return new DerivedLogger(opts);\n};","map":null,"metadata":{},"sourceType":"script"}