{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar path = require('path');\n\nvar fs = require('fs-extra');\n\nvar _require = require('os'),\n    platform = _require.platform;\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n\nvar _isBinaryFile = promisify(require('isbinaryfile'));\n\nvar textExtensions = require('textextensions').concat('gsp');\n\nvar binaryExtensions = require('binaryextensions');\n\nvar getClientIp = require('../utils/get-client-ip');\n\nvar _require3 = require('../utils/id'),\n    path2id = _require3.encode,\n    decode = _require3.decode;\n\nvar _require4 = require('../constants'),\n    TYPE_FILE = _require4.TYPE_FILE,\n    TYPE_DIR = _require4.TYPE_DIR;\n\nvar UNKNOWN_RESOURCE_TYPE_ERROR = 'Unknown resource type',\n    ORDER_BY_NAME = 'name',\n    ORDER_BY_MODIFIED_TIME = 'modifiedTime',\n    DEFAULT_ORDER_BY = ORDER_BY_NAME,\n    ORDER_DIRECTION_ASC = 'ASC',\n    ORDER_DIRECTION_DESC = 'DESC',\n    DEFAULT_ORDER_DIRECTION = ORDER_DIRECTION_ASC;\nvar fsCaseSensitive;\n\nswitch (platform()) {\n  case 'win32':\n    fsCaseSensitive = false;\n    break;\n\n  case 'darwin':\n    // Mac OS\n    // TODO\n    fsCaseSensitive = true;\n    break;\n\n  default:\n    // Linux and others.\n    fsCaseSensitive = true;\n    break;\n}\n\nvar getBasenameSorter = function getBasenameSorter(caseSensitive) {\n  return function (basenameA, basenameB) {\n    return basenameA.localeCompare(basenameB, {\n      sensitivity: caseSensitive && fsCaseSensitive ? 'variant' : 'accent'\n    });\n  };\n};\n/**\n * Default sorting order:\n * 1. Dirs sorted by basename, taking into consideration whether the platform is case-sensitive.\n * 2. Files sorted by basename, taking into consideration whether the platform is case-sensitive.\n */\n\n\nvar getSorter = function getSorter(_ref) {\n  var _ref$orderBy = _ref.orderBy,\n      orderBy = _ref$orderBy === void 0 ? DEFAULT_ORDER_BY : _ref$orderBy,\n      _ref$orderDirection = _ref.orderDirection,\n      orderDirection = _ref$orderDirection === void 0 ? DEFAULT_ORDER_DIRECTION : _ref$orderDirection,\n      _ref$caseSensitive = _ref.caseSensitive,\n      caseSensitive = _ref$caseSensitive === void 0 ? true : _ref$caseSensitive;\n  var sameTypeSorter;\n\n  switch (orderBy) {\n    case ORDER_BY_NAME:\n      var basenameSorter = getBasenameSorter(caseSensitive);\n\n      sameTypeSorter = function sameTypeSorter(itemA, itemB) {\n        return basenameSorter(itemA.name, itemB.name);\n      };\n\n      break;\n\n    case ORDER_BY_MODIFIED_TIME:\n      sameTypeSorter = function sameTypeSorter(itemA, itemB) {\n        return itemA.modifiedTime - itemB.modifiedTime;\n      };\n\n      break;\n\n    default:\n      throw Object.assign(new Error(\"Invalid order by: \".concat(orderBy)), {\n        httpCode: 400\n      });\n  }\n\n  var swapArgs;\n\n  switch (orderDirection) {\n    case ORDER_DIRECTION_ASC:\n      swapArgs = false;\n      break;\n\n    case ORDER_DIRECTION_DESC:\n      swapArgs = true;\n      break;\n\n    default:\n      throw Object.assign(new Error(\"Invalid order direction: \".concat(orderDirection)), {\n        httpCode: 400\n      });\n  }\n\n  return function (itemA, itemB) {\n    return (itemB.type === TYPE_DIR) - (itemA.type === TYPE_DIR) || sameTypeSorter.apply(void 0, _toConsumableArray(swapArgs ? [itemB, itemA] : [itemA, itemB]));\n  };\n};\n\nvar id2path = function id2path(id) {\n  var userPath = decode(id);\n\n  if (!userPath || typeof userPath !== 'string') {\n    throw new Error('Invalid path, it must be non-empty string');\n  }\n\n  if (userPath.charAt(0) !== path.sep) {\n    throw new Error(\"Invalid path, it must start with \\\"\".concat(path.sep, \"\\\"\"));\n  }\n\n  if (userPath !== path.sep && userPath.slice(-1) === path.sep) {\n    throw new Error(\"Invalid path, it must not end with \\\"\".concat(path.sep, \"\\\"\"));\n  }\n\n  if (userPath.includes(path.sep + path.sep)) {\n    throw new Error(\"Invalid path, it must not contain two \\\"\".concat(path.sep, \"\\\" in a row\"));\n  }\n\n  return userPath;\n};\n\nvar checkName = function checkName(name) {\n  if (!name) {\n    throw new Error('Name must not be empty');\n  }\n\n  if (typeof name !== 'string') {\n    throw new Error('Name must be a string');\n  }\n\n  if (name.includes(path.sep)) {\n    throw new Error('Unable to create name with forbidden symbols');\n  }\n\n  return name;\n};\n/*\n * Either path or parent/basename must be specified in input args.\n * The function returns a promise.\n */\n\n\nvar getResource =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var config, userPath, userParent, userBasename, stats, parent, _ref4, _ref5, resource;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = _ref2.config, userPath = _ref2.path, userParent = _ref2.parent, userBasename = _ref2.basename, stats = _ref2.stats;\n\n            if (!userPath) {\n              _context.next = 5;\n              break;\n            }\n\n            if (userPath === path.sep) {\n              userBasename = null;\n              userParent = null;\n            } else {\n              userBasename = path.basename(userPath);\n              userParent = path.dirname(userPath);\n            }\n\n            _context.next = 14;\n            break;\n\n          case 5:\n            if (!(userBasename && userParent)) {\n              _context.next = 9;\n              break;\n            }\n\n            userPath = path.join(userParent, userBasename);\n            _context.next = 14;\n            break;\n\n          case 9:\n            if (!(!userBasename && !userParent)) {\n              _context.next = 13;\n              break;\n            }\n\n            userPath = path.sep;\n            _context.next = 14;\n            break;\n\n          case 13:\n            throw new Error(\"Invalid parent \".concat(userParent, \" and basename \").concat(userBasename));\n\n          case 14:\n            _context.next = 16;\n            return Promise.all([// eslint-disable-line no-param-reassign,prefer-const\n            stats || fs.stat(path.join(config.fsRoot, userPath)), userParent && getResource({\n              config: config,\n              path: userParent\n            })]);\n\n          case 16:\n            _ref4 = _context.sent;\n            _ref5 = _slicedToArray(_ref4, 2);\n            stats = _ref5[0];\n            parent = _ref5[1];\n            resource = {\n              id: path2id(userPath),\n              name: userBasename || config.rootName,\n              createdTime: stats.birthtime,\n              modifiedTime: stats.mtime,\n              capabilities: {\n                canDelete: !!userParent && !config.readOnly,\n                canRename: !!userParent && !config.readOnly,\n                canCopy: !!userParent && !config.readOnly,\n                canEdit: stats.isFile() && !config.readOnly,\n                // Only files can be edited\n                canDownload: stats.isFile() // Only files can be downloaded\n\n              }\n            };\n\n            if (!stats.isDirectory()) {\n              _context.next = 28;\n              break;\n            }\n\n            resource.type = TYPE_DIR;\n            resource.capabilities.canListChildren = true;\n            resource.capabilities.canAddChildren = !config.readOnly;\n            resource.capabilities.canRemoveChildren = !config.readOnly;\n            _context.next = 34;\n            break;\n\n          case 28:\n            if (!stats.isFile()) {\n              _context.next = 33;\n              break;\n            }\n\n            resource.type = TYPE_FILE;\n            resource.size = stats.size;\n            _context.next = 34;\n            break;\n\n          case 33:\n            throw new Error(UNKNOWN_RESOURCE_TYPE_ERROR);\n\n          case 34:\n            if (parent) {\n              resource.parentId = parent.id;\n              resource.ancestors = [].concat(_toConsumableArray(parent.ancestors), [parent]);\n            } else {\n              resource.ancestors = [];\n            }\n\n            return _context.abrupt(\"return\", resource);\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getResource(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar handleError = function handleError(_ref6) {\n  var config = _ref6.config,\n      req = _ref6.req,\n      res = _ref6.res;\n  return function (err) {\n    config.logger.error(\"Error processing request by \".concat(getClientIp(req), \": \").concat(err) + '\\n' + (err.stack && err.stack.split('\\n')));\n\n    if (err.httpCode) {\n      res.status(err.httpCode).end();\n      return;\n    }\n\n    switch (err.code) {\n      case 'ENOENT':\n      case 'ENOTDIR':\n      case 'EISDIR':\n        res.status(410).end();\n        break;\n\n      case 'EACCES':\n      case 'EPERM':\n        res.status(403).end();\n        break;\n\n      default:\n        res.status(500).end();\n    }\n  };\n};\n/*\n * @param {string} filePath - File full path (either process-relative or absolute).\n * @returns {Promise} - A promise of boolean, whether the file content is binary (vs. text).\n */\n\n\nvar isBinaryFile =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(filePath) {\n    var ext;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ext = path.extname(filePath).slice(1);\n\n            if (!ext) {\n              _context2.next = 6;\n              break;\n            }\n\n            if (!textExtensions.includes(ext)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 4:\n            if (!binaryExtensions.includes(ext)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 6:\n            return _context2.abrupt(\"return\", _isBinaryFile(filePath));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function isBinaryFile(_x2) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  UNKNOWN_RESOURCE_TYPE_ERROR: UNKNOWN_RESOURCE_TYPE_ERROR,\n  getSorter: getSorter,\n  checkName: checkName,\n  id2path: id2path,\n  path2id: path2id,\n  getResource: getResource,\n  handleError: handleError,\n  isBinaryFile: isBinaryFile,\n  fsCaseSensitive: fsCaseSensitive\n};","map":null,"metadata":{},"sourceType":"script"}