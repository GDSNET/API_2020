{"ast":null,"code":"'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n/**\n * Gather environment variables from various locations.\n *\n * @param {Object} environment The default environment variables.\n * @returns {Object} environment.\n * @api public\n */\n\nfunction env(environment) {\n  environment = environment || {};\n\n  if ('object' === typeof process && 'object' === typeof process.env) {\n    env.merge(environment, process.env);\n  }\n\n  if ('undefined' !== typeof window) {\n    if ('string' === window.name && window.name.length) {\n      env.merge(environment, env.parse(window.name));\n    }\n\n    if (window.localStorage) {\n      try {\n        env.merge(environment, env.parse(window.localStorage.env || window.localStorage.debug));\n      } catch (e) {}\n    }\n\n    if ('object' === typeof window.location && 'string' === typeof window.location.hash && window.location.hash.length) {\n      env.merge(environment, env.parse(window.location.hash.charAt(0) === '#' ? window.location.hash.slice(1) : window.location.hash));\n    }\n  } //\n  // Also add lower case variants to the object for easy access.\n  //\n\n\n  var key, lower;\n\n  for (key in environment) {\n    lower = key.toLowerCase();\n\n    if (!(lower in environment)) {\n      environment[lower] = environment[key];\n    }\n  }\n\n  return environment;\n}\n/**\n * A poor man's merge utility.\n *\n * @param {Object} base Object where the add object is merged in.\n * @param {Object} add Object that needs to be added to the base object.\n * @returns {Object} base\n * @api private\n */\n\n\nenv.merge = function merge(base, add) {\n  for (var key in add) {\n    if (has.call(add, key)) {\n      base[key] = add[key];\n    }\n  }\n\n  return base;\n};\n/**\n * A poor man's query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object} Key value mapped query string.\n * @api private\n */\n\n\nenv.parse = function parse(query) {\n  var parser = /([^=?&]+)=([^&]*)/g,\n      result = {},\n      part;\n  if (!query) return result;\n\n  for (; part = parser.exec(query); result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])) {\n    ;\n  }\n\n  return result.env || result;\n}; //\n// Expose the module\n//\n\n\nmodule.exports = env;","map":null,"metadata":{},"sourceType":"script"}