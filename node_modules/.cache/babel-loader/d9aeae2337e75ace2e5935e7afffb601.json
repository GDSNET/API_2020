{"ast":null,"code":"var express = require('express'),\n    fs = require('fs'),\n    exists = require('file-exists-promise'),\n    path = require('path'),\n    packer = require('zip-stream'),\n    clean = require('var-clean').clean,\n    readDir = require('fs-readdir-recursive'),\n    Promise = require('es6-promise').Promise;\n\nfunction ZIPError() {}\n\nZIPError.prototype = Object.create(Error.prototype);\n\nfunction Ignored(obj) {\n  this.file = obj;\n}\n\nIgnored.prototype.constructor = Ignored;\n\nfunction ZIPResult(err, ignored) {\n  this.err = err;\n  this.ignored = ignored;\n}\n\nZIPResult.prototype.constructor = ZIPResult;\n\nfunction zipEntry(zip, dat, opt) {\n  return new Promise(function (resolve, reject) {\n    zip.entry(dat, opt, function (err, data) {\n      if (err) reject(err);else resolve(data);\n    });\n  });\n}\n\nfunction _ZIP(opt) {\n  var _this = this;\n\n  return new Promise(function (resolve, reject) {\n    opt = opt || {};\n    opt.filename = clean.cleanOnlyString(opt.filename) || \"attachment.zip\";\n    opt.files = opt.files || [];\n\n    _this.header('Content-Type', 'application/zip');\n\n    _this.header('Content-Disposition', 'attachment; filename=\"' + opt.filename + '\"');\n\n    var zip = new packer();\n    zip.pipe(_this); // res is a writable stream\n\n    function addFilePath(filepath, opt) {\n      return new Promise(function (resolve, reject) {\n        //check if file exists or not\n        exists(filepath).then(function (stat) {\n          try {\n            if (stat.isFile()) {\n              //if it is a file\n              zipEntry(zip, fs.createReadStream(filepath), opt).then(resolve, reject);\n            } else {\n              //if it is a directory\n              var files = readDir(filepath);\n              each(files, function iteratee(file) {\n                var childOpt = {\n                  name: path.join(opt.name, file),\n                  comment: opt.comment,\n                  date: opt.date,\n                  mode: opt.mode,\n                  type: opt.type\n                };\n                return addFilePath(path.join(filepath, file), childOpt);\n              }).then(resolve, reject);\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }, function () {\n          //if not exists\n          return reject(new ZIPError());\n        });\n      });\n    }\n\n    function addFileContent(data, opt) {\n      return new Promise(function (resolve, reject) {\n        data = clean.cleanOnlyString(data);\n\n        if (data !== undefined) {\n          zipEntry(zip, data, opt).then(resolve, reject);\n        } else {\n          reject(new ZIPError());\n        }\n      });\n    }\n\n    function addFile(file) {\n      return new Promise(function (resolve, reject) {\n        var fileOpt = {\n          name: clean.cleanOnlyString(file.name) || \"noname\",\n          comment: clean.cleanOnlyString(file.comment) || \"\",\n          date: file.date,\n          mode: file.mode,\n          type: file.type\n        };\n        var promise = file.path !== undefined ? addFilePath(file.path, fileOpt) : addFileContent(file.content, fileOpt);\n        promise.then(resolve, function (e) {\n          if (e instanceof ZIPError) {\n            e = new Ignored(file);\n          }\n\n          reject(e);\n        });\n      });\n    }\n\n    each(opt.files, addFile).then(function (data) {\n      zip.finalize();\n\n      _this.end();\n\n      if (data.err instanceof Array && data.err.length > 0) {\n        reject(data.err);\n      } else {\n        resolve({\n          size: zip.getBytesWritten(),\n          ignored: data.ignored\n        });\n      }\n    }, function (err) {\n      _this.sendStatus(500);\n\n      _this.end();\n\n      reject(err);\n    });\n  });\n}\n\n;\n\nfunction ZIP(req, res, next) {\n  res.zip = _ZIP;\n  next();\n}\n\n;\n\nfunction each(arr, iter) {\n  var result = [],\n      e = [];\n\n  function goodPromise(promise) {\n    return new Promise(function (resolve) {\n      promise.then(function (data) {\n        if (data instanceof ZIPResult) {\n          //add to the array\n          Array.prototype.push.apply(e, data.err);\n          Array.prototype.push.apply(result, data.ignored);\n        }\n\n        resolve();\n      }, function (err) {\n        if (err instanceof Ignored) {\n          result.push(err.file);\n        } else {\n          e.push(err);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  var ready = Promise.resolve(null);\n  arr.forEach(function (file) {\n    ready = ready.then(function () {\n      return goodPromise(iter(file));\n    });\n  });\n  return ready.then(function () {\n    return Promise.resolve(new ZIPResult(e, result));\n  });\n}\n\nexports = module.exports = function () {\n  return ZIP;\n};","map":null,"metadata":{},"sourceType":"script"}