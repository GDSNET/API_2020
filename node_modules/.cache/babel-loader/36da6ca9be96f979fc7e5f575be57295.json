{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  clean: {\n    cleanBoolean: function cleanBoolean(value) {\n      if (value === true || value === 'true') {\n        return true;\n      } else if (value === false || value === 'false') {\n        return false;\n      }\n\n      return undefined;\n    },\n    cleanTruthy: function cleanTruthy(value) {\n      if (value === true || value === 'true') {\n        return true;\n      } else if (value === false || value === 'false') {\n        return false;\n      }\n\n      return !!value;\n    },\n    cleanInteger: function cleanInteger(value) {\n      if (/^[-]?\\d+$/.test(value)) {\n        return Number(value);\n      }\n\n      return undefined;\n    },\n    cleanPositiveInteger: function cleanPositiveInteger(value) {\n      if (/^[-]?\\d+$/.test(value)) {\n        var v;\n\n        if ((v = Number(value)) >= 0) {\n          return v;\n        }\n      }\n\n      return undefined;\n    },\n    cleanString: function cleanString(value) {\n      var v;\n\n      if ((v = String(value)) !== '[object Object]') {\n        return v;\n      }\n\n      return undefined;\n    },\n    cleanOnlyString: function cleanOnlyString(value) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      return undefined;\n    }\n  },\n  cleanOrThrow: {\n    cleanBoolean: function cleanBoolean(value) {\n      if (value === true || value === 'true') {\n        return true;\n      } else if (value === false || value === 'false') {\n        return false;\n      }\n\n      throw new Error(\"Not a Boolean\");\n    },\n    cleanTruthy: function cleanTruthy(value) {\n      if (value === true || value === 'true') {\n        return true;\n      } else if (value === false || value === 'false') {\n        return false;\n      }\n\n      return !!value;\n    },\n    cleanInteger: function cleanInteger(value) {\n      if (/^[-]?\\d+$/.test(value)) {\n        return Number(value);\n      }\n\n      throw new Error(\"Not a Number\");\n    },\n    cleanPositiveInteger: function cleanPositiveInteger(value) {\n      if (/^[-]?\\d+$/.test(value)) {\n        var v;\n\n        if ((v = Number(value)) >= 0) {\n          return v;\n        } else {\n          throw new Error(\"Negative number\");\n        }\n      }\n\n      throw new Error(\"Not a Number\");\n    },\n    cleanString: function cleanString(value) {\n      var v;\n\n      if ((v = String(value)) !== '[object Object]') {\n        return v;\n      }\n\n      throw new Error(\"Not a String\");\n    },\n    cleanOnlyString: function cleanOnlyString(value) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      throw new Error(\"Not a String\");\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}