{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar alloc = require('buffer-alloc');\n\nvar MAX_BYTES = 512;\n\nmodule.exports = function (bytes, size, cb) {\n  // Only two args\n  if (cb === undefined) {\n    var file = bytes;\n    cb = size;\n    fs.stat(file, function (err, stat) {\n      if (err || !stat.isFile()) return cb(err, false);\n      fs.open(file, 'r', function (r_err, descriptor) {\n        if (r_err) return cb(r_err);\n        bytes = alloc(MAX_BYTES); // Read the file with no encoding for raw buffer access.\n\n        fs.read(descriptor, bytes, 0, bytes.length, 0, function (err, size, bytes) {\n          fs.close(descriptor, function (c_err) {\n            if (c_err) return cb(c_err, false);\n            return cb(null, isBinaryCheck(bytes, size));\n          });\n        });\n      });\n    });\n  } else return cb(null, isBinaryCheck(bytes, size));\n};\n\nfunction isBinaryCheck(bytes, size) {\n  if (size === 0) return false;\n  var suspicious_bytes = 0;\n  var total_bytes = Math.min(size, MAX_BYTES); // UTF-8 BOM\n\n  if (size >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) {\n    return false;\n  } // UTF-32 BOM\n\n\n  if (size >= 4 && bytes[0] === 0x00 && bytes[1] === 0x00 && bytes[2] == 0xFE && bytes[3] == 0xFF) {\n    return false;\n  } // UTF-32 LE BOM\n\n\n  if (size >= 4 && bytes[0] == 0xFF && bytes[1] == 0xFE && bytes[2] === 0x00 && bytes[3] === 0x00) {\n    return false;\n  } // GB BOM\n\n\n  if (size >= 4 && bytes[0] == 0x84 && bytes[1] == 0x31 && bytes[2] == 0x95 && bytes[3] == 0x33) {\n    return false;\n  }\n\n  if (total_bytes >= 5 && bytes.slice(0, 5) == \"%PDF-\") {\n    /* PDF. This is binary. */\n    return true;\n  } // UTF-16 BE BOM\n\n\n  if (size >= 2 && bytes[0] == 0xFE && bytes[1] == 0xFF) {\n    return false;\n  } // UTF-16 LE BOM\n\n\n  if (size >= 2 && bytes[0] == 0xFF && bytes[1] == 0xFE) {\n    return false;\n  }\n\n  for (var i = 0; i < total_bytes; i++) {\n    if (bytes[i] === 0) {\n      // NULL byte--it's binary!\n      return true;\n    } else if ((bytes[i] < 7 || bytes[i] > 14) && (bytes[i] < 32 || bytes[i] > 127)) {\n      // UTF-8 detection\n      if (bytes[i] > 193 && bytes[i] < 224 && i + 1 < total_bytes) {\n        i++;\n\n        if (bytes[i] > 127 && bytes[i] < 192) {\n          continue;\n        }\n      } else if (bytes[i] > 223 && bytes[i] < 240 && i + 2 < total_bytes) {\n        i++;\n\n        if (bytes[i] > 127 && bytes[i] < 192 && bytes[i + 1] > 127 && bytes[i + 1] < 192) {\n          i++;\n          continue;\n        }\n      }\n\n      suspicious_bytes++; // Read at least 32 bytes before making a decision\n\n      if (i > 32 && suspicious_bytes * 100 / total_bytes > 10) {\n        return true;\n      }\n    }\n  }\n\n  if (suspicious_bytes * 100 / total_bytes > 10) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports.sync = function (bytes, size) {\n  // Only one arg\n  if (size === undefined) {\n    var file = bytes;\n\n    try {\n      if (!fs.statSync(file).isFile()) return false;\n    } catch (err) {// otherwise continue on\n    }\n\n    var descriptor = fs.openSync(file, 'r');\n\n    try {\n      // Read the file with no encoding for raw buffer access.\n      bytes = alloc(MAX_BYTES);\n      size = fs.readSync(descriptor, bytes, 0, bytes.length, 0);\n    } finally {\n      fs.closeSync(descriptor);\n    }\n\n    return isBinaryCheck(bytes, size);\n  } else return isBinaryCheck(bytes, size);\n};","map":null,"metadata":{},"sourceType":"script"}