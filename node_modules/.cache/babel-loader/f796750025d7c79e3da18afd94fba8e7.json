{"ast":null,"code":"/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/inherits\");\n\nvar isStream = require('is-stream');\n\nvar _require = require('triple-beam'),\n    MESSAGE = _require.MESSAGE;\n\nvar os = require('os');\n\nvar TransportStream = require('winston-transport');\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_TransportStream) {\n  _inherits(Stream, _TransportStream);\n\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  function Stream() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Stream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stream).call(this, options));\n\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    } // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n\n\n    _this._stream = options.stream;\n\n    _this._stream.setMaxListeners(Infinity);\n\n    _this.isObjectMode = options.stream._writableState.objectMode;\n    _this.eol = options.eol || os.EOL;\n    return _this;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  _createClass(Stream, [{\n    key: \"log\",\n    value: function log(info, callback) {\n      var _this2 = this;\n\n      setImmediate(function () {\n        return _this2.emit('logged', info);\n      });\n\n      if (this.isObjectMode) {\n        this._stream.write(info);\n\n        if (callback) {\n          callback(); // eslint-disable-line callback-return\n        }\n\n        return;\n      }\n\n      this._stream.write(\"\".concat(info[MESSAGE]).concat(this.eol));\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      return;\n    }\n  }]);\n\n  return Stream;\n}(TransportStream);","map":null,"metadata":{},"sourceType":"script"}