{"ast":null,"code":"var camelize = require('camelize');\n\nvar cspBuilder = require('content-security-policy-builder');\n\nvar isFunction = require('./lib/is-function');\n\nvar platform = require('platform');\n\nvar checkOptions = require('./lib/check-options');\n\nvar containsFunction = require('./lib/contains-function');\n\nvar getHeaderKeysForBrowser = require('./lib/get-header-keys-for-browser');\n\nvar transformDirectivesForBrowser = require('./lib/transform-directives-for-browser');\n\nvar parseDynamicDirectives = require('./lib/parse-dynamic-directives');\n\nvar config = require('./lib/config');\n\nmodule.exports = function csp(options) {\n  checkOptions(options);\n  var originalDirectives = camelize(options.directives || {});\n  var directivesAreDynamic = containsFunction(originalDirectives);\n  var shouldBrowserSniff = options.browserSniff !== false;\n  var reportOnlyIsFunction = isFunction(options.reportOnly);\n\n  if (shouldBrowserSniff) {\n    return function csp(req, res, next) {\n      var userAgent = req.headers['user-agent'];\n      var browser;\n\n      if (userAgent) {\n        browser = platform.parse(userAgent);\n      } else {\n        browser = {};\n      }\n\n      var headerKeys;\n\n      if (options.setAllHeaders || !userAgent) {\n        headerKeys = config.allHeaders;\n      } else {\n        headerKeys = getHeaderKeysForBrowser(browser, options);\n      }\n\n      if (headerKeys.length === 0) {\n        next();\n        return;\n      }\n\n      var directives = transformDirectivesForBrowser(browser, originalDirectives);\n\n      if (directivesAreDynamic) {\n        directives = parseDynamicDirectives(directives, [req, res]);\n      }\n\n      var policyString = cspBuilder({\n        directives: directives\n      });\n      headerKeys.forEach(function (headerKey) {\n        if (reportOnlyIsFunction && options.reportOnly(req, res) || !reportOnlyIsFunction && options.reportOnly) {\n          headerKey += '-Report-Only';\n        }\n\n        res.setHeader(headerKey, policyString);\n      });\n      next();\n    };\n  } else {\n    var headerKeys;\n\n    if (options.setAllHeaders) {\n      headerKeys = config.allHeaders;\n    } else {\n      headerKeys = ['Content-Security-Policy'];\n    }\n\n    return function csp(req, res, next) {\n      var directives = parseDynamicDirectives(originalDirectives, [req, res]);\n      var policyString = cspBuilder({\n        directives: directives\n      });\n\n      if (reportOnlyIsFunction && options.reportOnly(req, res) || !reportOnlyIsFunction && options.reportOnly) {\n        headerKeys.forEach(function (headerKey) {\n          res.setHeader(headerKey + '-Report-Only', policyString);\n        });\n      } else {\n        headerKeys.forEach(function (headerKey) {\n          res.setHeader(headerKey, policyString);\n        });\n      }\n\n      next();\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}