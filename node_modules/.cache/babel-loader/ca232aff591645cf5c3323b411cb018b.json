{"ast":null,"code":"/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar _defineProperty = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mac_gdsnet/Documents/gds_web/my-anuario/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _stream = require('readable-stream');\n\nvar asyncForEach = require('async/forEach');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL,\n    SPLAT = _require.SPLAT;\n\nvar isStream = require('is-stream');\n\nvar ExceptionHandler = require('./exception-handler');\n\nvar LegacyTransportStream = require('winston-transport/legacy');\n\nvar Profiler = require('./profiler');\n\nvar _require2 = require('./common'),\n    clone = _require2.clone,\n    warn = _require2.warn;\n\nvar config = require('./config');\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {stream.Transform}\n */\n\n\nvar Logger =\n/*#__PURE__*/\nfunction (_stream$Transform) {\n  _inherits(Logger, _stream$Transform);\n\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  function Logger(options) {\n    var _this;\n\n    _classCallCheck(this, Logger);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Logger).call(this, {\n      objectMode: true\n    }));\n\n    _this.configure(options);\n\n    return _this;\n  }\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  _createClass(Logger, [{\n    key: \"configure\",\n    value: function configure() {\n      var _this2 = this;\n\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          silent = _ref.silent,\n          format = _ref.format,\n          levels = _ref.levels,\n          _ref$level = _ref.level,\n          level = _ref$level === void 0 ? 'info' : _ref$level,\n          _ref$exitOnError = _ref.exitOnError,\n          exitOnError = _ref$exitOnError === void 0 ? true : _ref$exitOnError,\n          transports = _ref.transports,\n          colors = _ref.colors,\n          emitErrs = _ref.emitErrs,\n          formatters = _ref.formatters,\n          padLevels = _ref.padLevels,\n          rewriters = _ref.rewriters,\n          stripColors = _ref.stripColors,\n          exceptionHandlers = _ref.exceptionHandlers;\n\n      // Reset transports if we already have them\n      if (this.transports.length) {\n        this.clear();\n      }\n\n      this.silent = silent;\n      this.format = format || this.format || require('logform/json')(); // Hoist other options onto this instance.\n\n      this.levels = levels || this.levels || config.npm.levels;\n      this.level = level;\n      this.exceptions = new ExceptionHandler(this);\n      this.profilers = {};\n      this.exitOnError = exitOnError; // Add all transports we have been provided.\n\n      if (transports) {\n        transports = Array.isArray(transports) ? transports : [transports];\n        transports.forEach(function (transport) {\n          return _this2.add(transport);\n        });\n      }\n\n      if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {\n        throw new Error(['{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.', 'Use a custom winston.format(function) instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n      }\n\n      if (exceptionHandlers) {\n        this.exceptions.handle(exceptionHandlers);\n      }\n    }\n  }, {\n    key: \"isLevelEnabled\",\n    value: function isLevelEnabled(level) {\n      var _this3 = this;\n\n      var givenLevelValue = getLevelValue(this.levels, level);\n\n      if (givenLevelValue === null) {\n        return false;\n      }\n\n      var configuredLevelValue = getLevelValue(this.levels, this.level);\n\n      if (configuredLevelValue === null) {\n        return false;\n      }\n\n      if (!this.transports || this.transports.length === 0) {\n        return configuredLevelValue >= givenLevelValue;\n      }\n\n      var index = this.transports.findIndex(function (transport) {\n        var transportLevelValue = getLevelValue(_this3.levels, transport.level);\n\n        if (transportLevelValue === null) {\n          transportLevelValue = configuredLevelValue;\n        }\n\n        return transportLevelValue >= givenLevelValue;\n      });\n      return index !== -1;\n    }\n    /* eslint-disable valid-jsdoc */\n\n    /**\n     * Ensure backwards compatibility with a `log` method\n     * @param {mixed} level - Level the log message is written at.\n     * @param {mixed} msg - TODO: add param description.\n     * @param {mixed} meta - TODO: add param description.\n     * @returns {Logger} - TODO: add return description.\n     *\n     * @example\n     *    // Supports the existing API:\n     *    logger.log('info', 'Hello world', { custom: true });\n     *    logger.log('info', new Error('Yo, it\\'s on fire'));\n     *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n     *\n     *    // And the new API with a single JSON literal:\n     *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n     *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n     *    logger.log({\n     *      level: 'info',\n     *      message: '%s %d%%',\n     *      [SPLAT]: ['A string', 50],\n     *      meta: { thisIsMeta: true }\n     *    });\n     *\n     */\n\n    /* eslint-enable valid-jsdoc */\n\n  }, {\n    key: \"log\",\n    value: function log(level, msg) {\n      for (var _len = arguments.length, splat = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        splat[_key - 2] = arguments[_key];\n      }\n\n      // eslint-disable-line max-params\n      // Optimize for the hotpath of logging JSON literals\n      if (arguments.length === 1) {\n        // Yo dawg, I heard you like levels ... seriously ...\n        // In this context the LHS `level` here is actually the `info` so read\n        // this as: info[LEVEL] = info.level;\n        level[LEVEL] = level.level;\n        this.write(level);\n        return this;\n      } // Slightly less hotpath, but worth optimizing for.\n\n\n      if (arguments.length === 2) {\n        var _this$write;\n\n        if (msg && typeof msg === 'object') {\n          msg[LEVEL] = msg.level = level;\n          this.write(msg);\n          return this;\n        }\n\n        this.write((_this$write = {}, _defineProperty(_this$write, LEVEL, level), _defineProperty(_this$write, \"level\", level), _defineProperty(_this$write, \"message\", msg), _this$write));\n        return this;\n      }\n\n      var meta = splat[0];\n\n      if (typeof meta === 'object' && meta !== null) {\n        var _Object$assign;\n\n        this.write(Object.assign({}, meta, (_Object$assign = {}, _defineProperty(_Object$assign, LEVEL, level), _defineProperty(_Object$assign, SPLAT, splat.slice(0)), _defineProperty(_Object$assign, \"level\", level), _defineProperty(_Object$assign, \"message\", msg), _Object$assign)));\n      } else {\n        var _Object$assign2;\n\n        this.write(Object.assign({}, (_Object$assign2 = {}, _defineProperty(_Object$assign2, LEVEL, level), _defineProperty(_Object$assign2, SPLAT, splat), _defineProperty(_Object$assign2, \"level\", level), _defineProperty(_Object$assign2, \"message\", msg), _Object$assign2)));\n      }\n\n      return this;\n    }\n    /**\n     * Pushes data so that it can be picked up by all of our pipe targets.\n     * @param {mixed} info - TODO: add param description.\n     * @param {mixed} enc - TODO: add param description.\n     * @param {mixed} callback - Continues stream processing.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_transform\",\n    value: function _transform(info, enc, callback) {\n      if (this.silent) {\n        return callback();\n      } // [LEVEL] is only soft guaranteed to be set here since we are a proper\n      // stream. It is likely that `info` came in through `.log(info)` or\n      // `.info(info)`. If it is not defined, however, define it.\n      // This LEVEL symbol is provided by `triple-beam` and also used in:\n      // - logform\n      // - winston-transport\n      // - abstract-winston-transport\n\n\n      if (!info[LEVEL]) {\n        info[LEVEL] = info.level;\n      } // Remark: really not sure what to do here, but this has been reported as\n      // very confusing by pre winston@2.0.0 users as quite confusing when using\n      // custom levels.\n\n\n      if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n        // eslint-disable-next-line no-console\n        console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n      } // Remark: not sure if we should simply error here.\n\n\n      if (!this._readableState.pipes) {\n        // eslint-disable-next-line no-console\n        console.error('[winston] Attempt to write logs with no transports %j', info);\n      } // Here we write to the `format` pipe-chain, which on `readable` above will\n      // push the formatted `info` Object onto the buffer for this instance. We trap\n      // (and re-throw) any errors generated by the user-provided format, but also\n      // guarantee that the streams callback is invoked so that we can continue flowing.\n\n\n      try {\n        this.push(this.format.transform(info, this.format.options));\n      } catch (ex) {\n        throw ex;\n      } finally {\n        // eslint-disable-next-line callback-return\n        callback();\n      }\n    }\n    /**\n     * Delays the 'finish' event until all transport pipe targets have\n     * also emitted 'finish' or are already finished.\n     * @param {mixed} callback - Continues stream processing.\n     */\n\n  }, {\n    key: \"_final\",\n    value: function _final(callback) {\n      var transports = this.transports.slice();\n      asyncForEach(transports, function (transport, next) {\n        if (!transport || transport.finished) return setImmediate(next);\n        transport.once('finish', next);\n        transport.end();\n      }, callback);\n    }\n    /**\n     * Adds the transport to this logger instance by piping to it.\n     * @param {mixed} transport - TODO: add param description.\n     * @returns {Logger} - TODO: add return description.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(transport) {\n      // Support backwards compatibility with all existing `winston < 3.x.x`\n      // transports which meet one of two criteria:\n      // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n      // 2. They expose a log method which has a length greater than 2 (i.e. more then\n      //    just `log(info, callback)`.\n      var target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({\n        transport: transport\n      }) : transport;\n\n      if (!target._writableState || !target._writableState.objectMode) {\n        throw new Error('Transports must WritableStreams in objectMode. Set { objectMode: true }.');\n      } // Listen for the `error` event on the new Transport.\n\n\n      this._onError(target);\n\n      this.pipe(target);\n\n      if (transport.handleExceptions) {\n        this.exceptions.handle();\n      }\n\n      return this;\n    }\n    /**\n     * Removes the transport from this logger instance by unpiping from it.\n     * @param {mixed} transport - TODO: add param description.\n     * @returns {Logger} - TODO: add return description.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(transport) {\n      var target = transport;\n\n      if (!isStream(transport) || transport.log.length > 2) {\n        target = this.transports.filter(function (match) {\n          return match.transport === transport;\n        })[0];\n      }\n\n      if (target) {\n        this.unpipe(target);\n      }\n\n      return this;\n    }\n    /**\n     * Removes all transports from this logger instance.\n     * @returns {Logger} - TODO: add return description.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.unpipe();\n      return this;\n    }\n    /**\n     * Cleans up resources (streams, event listeners) for all transports\n     * associated with this instance (if necessary).\n     * @returns {Logger} - TODO: add return description.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.clear();\n      this.emit('close');\n      return this;\n    }\n    /**\n     * Sets the `target` levels specified on this instance.\n     * @param {Object} Target levels to use on this instance.\n     */\n\n  }, {\n    key: \"setLevels\",\n    value: function setLevels() {\n      warn.deprecated('setLevels');\n    }\n    /**\n     * Queries the all transports for this instance with the specified `options`.\n     * This will aggregate each transport's results into one object containing\n     * a property per transport.\n     * @param {Object} options - Query options for this instance.\n     * @param {function} callback - Continuation to respond to when complete.\n     * @retruns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      var results = {};\n      var queryObject = clone(options.query) || {}; // Helper function to query a single transport\n\n      function queryTransport(transport, next) {\n        if (options.query) {\n          options.query = transport.formatQuery(queryObject);\n        }\n\n        transport.query(options, function (err, res) {\n          if (err) {\n            return next(err);\n          }\n\n          next(null, transport.formatResults(res, options.format));\n        });\n      } // Helper function to accumulate the results from `queryTransport` into\n      // the `results`.\n\n\n      function addResults(transport, next) {\n        queryTransport(transport, function (err, result) {\n          // queryTransport could potentially invoke the callback multiple times\n          // since Transport code can be unpredictable.\n          if (next) {\n            result = err || result;\n\n            if (result) {\n              results[transport.name] = result;\n            } // eslint-disable-next-line callback-return\n\n\n            next();\n          }\n\n          next = null;\n        });\n      } // Iterate over the transports in parallel setting the appropriate key in\n      // the `results`.\n\n\n      asyncForEach(this.transports.filter(function (transport) {\n        return !!transport.query;\n      }), addResults, function () {\n        return callback(null, results);\n      });\n    }\n    /**\n     * Returns a log stream for all transports. Options object is optional.\n     * @param{Object} options={} - Stream options for this instance.\n     * @returns {Stream} - TODO: add return description.\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var out = new _stream.Stream();\n      var streams = [];\n      out._streams = streams;\n\n      out.destroy = function () {\n        var i = streams.length;\n\n        while (i--) {\n          streams[i].destroy();\n        }\n      }; // Create a list of all transports for this instance.\n\n\n      this.transports.filter(function (transport) {\n        return !!transport.stream;\n      }).forEach(function (transport) {\n        var str = transport.stream(options);\n\n        if (!str) {\n          return;\n        }\n\n        streams.push(str);\n        str.on('log', function (log) {\n          log.transport = log.transport || [];\n          log.transport.push(transport.name);\n          out.emit('log', log);\n        });\n        str.on('error', function (err) {\n          err.transport = err.transport || [];\n          err.transport.push(transport.name);\n          out.emit('error', err);\n        });\n      });\n      return out;\n    }\n    /**\n     * Returns an object corresponding to a specific timing. When done is called\n     * the timer will finish and log the duration. e.g.:\n     * @returns {Profile} - TODO: add return description.\n     * @example\n     *    const timer = winston.startTimer()\n     *    setTimeout(() => {\n     *      timer.done({\n     *        message: 'Logging message'\n     *      });\n     *    }, 1000);\n     */\n\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      return new Profiler(this);\n    }\n    /**\n     * Tracks the time inbetween subsequent calls to this method with the same\n     * `id` parameter. The second call to this method will log the difference in\n     * milliseconds along with the message.\n     * @param {string} id Unique id of the profiler\n     * @returns {Logger} - TODO: add return description.\n     */\n\n  }, {\n    key: \"profile\",\n    value: function profile(id) {\n      var time = Date.now();\n\n      if (this.profilers[id]) {\n        var timeEnd = this.profilers[id];\n        delete this.profilers[id]; // Attempt to be kind to users if they are still using older APIs.\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        if (typeof args[args.length - 2] === 'function') {\n          // eslint-disable-next-line no-console\n          console.warn('Callback function no longer supported as of winston@3.0.0');\n          args.pop();\n        } // Set the duration property of the metadata\n\n\n        var info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n        info.level = info.level || 'info';\n        info.durationMs = time - timeEnd;\n        info.message = info.message || id;\n        return this.write(info);\n      }\n\n      this.profilers[id] = time;\n      return this;\n    }\n    /**\n     * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n     * @returns {undefined}\n     * @deprecated\n     */\n\n  }, {\n    key: \"handleExceptions\",\n    value: function handleExceptions() {\n      var _this$exceptions;\n\n      // eslint-disable-next-line no-console\n      console.warn('Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()');\n\n      (_this$exceptions = this.exceptions).handle.apply(_this$exceptions, arguments);\n    }\n    /**\n     * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n     * @returns {undefined}\n     * @deprecated\n     */\n\n  }, {\n    key: \"unhandleExceptions\",\n    value: function unhandleExceptions() {\n      var _this$exceptions2;\n\n      // eslint-disable-next-line no-console\n      console.warn('Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()');\n\n      (_this$exceptions2 = this.exceptions).unhandle.apply(_this$exceptions2, arguments);\n    }\n    /**\n     * Throw a more meaningful deprecation notice\n     * @throws {Error} - TODO: add throws description.\n     */\n\n  }, {\n    key: \"cli\",\n    value: function cli() {\n      throw new Error(['Logger.cli() was removed in winston@3.0.0', 'Use a custom winston.formats.cli() instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n    }\n    /**\n     * Bubbles the error, `err`, that occured on the specified `transport` up\n     * from this instance if `emitErrs` has been set.\n     * @param {Object} transport - Transport on which the error occured\n     * @throws {Error} - Error that occurred on the transport\n     * @private\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(transport) {\n      function transportError(err) {\n        this.emit('error', err, transport);\n      }\n\n      if (!transport.__winstonError) {\n        transport.__winstonError = transportError.bind(this);\n        transport.on('error', transport.__winstonError);\n      }\n    }\n  }]);\n\n  return Logger;\n}(stream.Transform);\n\nfunction getLevelValue(levels, level) {\n  var value = levels[level];\n\n  if (!value && value !== 0) {\n    return null;\n  }\n\n  return value;\n}\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\n\n\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n  get: function get() {\n    var pipes = this._readableState.pipes;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n});\nmodule.exports = Logger;","map":null,"metadata":{},"sourceType":"script"}